package com.xinwei.orderDb.domain;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.StringUtils;

/**
 * Model class of order_flow_stepDef.
 * 
 * @author generated by ERMaster
 * @version $Id$
 */
public class OrderFlowStepdef implements Serializable {

	
	static public final String Step_out_Default="default";
	Logger logger = LoggerFactory.getLogger(OrderFlowStepdef.class);
	/** serialVersionUID. */
	private static final long serialVersionUID = 1L;

	/** 订单类型. */
	private String catetory;

	/** 订单步骤ID. */
	private String stepId;

	/** 步骤名称. */
	private String stepName;

	/** 步骤执行任务. */
	private String taskIn;

	/** 任务执行后失败的步骤定义. */
	private String taskOutError;

	/** 任务执行成功后的步骤定义. */
	private String taskOutSucc;

	/** 失败后如果没有配置错误码，调用该请求. */
	private String taskOutDefault;

	/** 任务运行类型. */
	private String runType;

	/** 任务运行参数. */
	private String runInfo;

	/** 任务重做次数. */
	private String retryTimes;
	/**
	 * 定义执行完任务失败后根据返回数值控制状态跳转，这个字段需要填写表格，以；分割行，以，分割列
格式如下：
错误码支持区间配置；支持离散的；
类型(0-单值，1-区间，2-离散数值)返回数值错误码,步骤,是否通知运维(0--不通知，其余通知）;
	 */
	private Map<String,StepJumpDef> stepMaps = new HashMap<String,StepJumpDef>();
	
	private List<StepJumpDef> stepLists = new ArrayList<StepJumpDef>();
	
	protected void setStepJumpDefs(String strStr)
	{
		//获取多个strStepJumpDefs
		try {
			String[] strStepJumpDefs= StringUtils.split(strStr, ";");
			if(strStepJumpDefs==null)
			{
				logger.error("init StepJumpDefs error:" + this.toString());
				System.exit(0);
			}
			for(int i=0;i<strStepJumpDefs.length;i++)
			{
				
				String[] strStepJumpDefInfo = StringUtils.split(strStepJumpDefs[i], ",");
				if(strStepJumpDefInfo==null||strStepJumpDefInfo.length<4)
				{
					logger.error("init StepJumpDefs error:" + this.toString() + ":" + strStepJumpDefs[i]);
					System.exit(0);
				}
				int category = Integer.parseInt(strStepJumpDefInfo[0]);
				//单值
				if(category ==StepJumpDef.Category_Single)
				{
					StepJumpDef stepJumpDef = new StepJumpDef();
					stepJumpDef.setCategory(category);
					if(Step_out_Default.compareToIgnoreCase(strStepJumpDefInfo[1].trim())==0)
					{
						this.stepMaps.put(Step_out_Default, stepJumpDef);
					}
					else
					{
						stepJumpDef.setStartResult(Integer.parseInt(strStepJumpDefInfo[1]));
						this.stepMaps.put(strStepJumpDefInfo[1].trim(), stepJumpDef);
					}
					stepJumpDef.setNextStep(strStepJumpDefInfo[2]);
					
					stepJumpDef.setIsNotify(Integer.parseInt(strStepJumpDefInfo[3]));
					
					
				}
				else if(category ==StepJumpDef.Category_discrete)
				{
					for(int j=1;j<strStepJumpDefInfo.length-2;j++)
					{
						StepJumpDef stepJumpDef = new StepJumpDef();
						stepJumpDef.setCategory(category);
						stepJumpDef.setStartResult(Integer.parseInt(strStepJumpDefInfo[j]));
						stepJumpDef.setNextStep(strStepJumpDefInfo[strStepJumpDefInfo.length-2]);
						
						stepJumpDef.setIsNotify(Integer.parseInt(strStepJumpDefInfo[strStepJumpDefInfo.length-1]));
						
						this.stepMaps.put(strStepJumpDefInfo[j].trim(), stepJumpDef);
					}
				} 
				else if(category ==StepJumpDef.Category_Range)
				{
					StepJumpDef stepJumpDef = new StepJumpDef();
					stepJumpDef.setCategory(category);
					stepJumpDef.setStartResult(Integer.parseInt(strStepJumpDefInfo[1]));
					stepJumpDef.setStartResult(Integer.parseInt(strStepJumpDefInfo[2]));
					
					stepJumpDef.setNextStep(strStepJumpDefInfo[strStepJumpDefInfo.length-2]);
					
					stepJumpDef.setIsNotify(Integer.parseInt(strStepJumpDefInfo[strStepJumpDefInfo.length-1]));
					
					this.stepLists.add(stepJumpDef);
				}
				else
				{
					logger.error("init StepJumpDefs error:" + this.toString() + ":" + strStepJumpDefs[i]);
					System.exit(0);
				}
				
				
			}
		} catch (NumberFormatException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			logger.error("init StepJumpDefs error:" + this.toString() + ":" + strStr);
			System.exit(0);
		}
	}
	/**
	 * 根据结果获取步骤跳转定义；
	 * @param result
	 * @return
	 */
	public StepJumpDef getStepJumpDef(int result)
	{
		String key = String.valueOf(result);
		if(this.stepMaps.containsKey(key))
		{
			return stepMaps.get(key);
		}
		for(int i=0;i<this.stepLists.size();i++)
		{
			StepJumpDef stepJumpDef = stepLists.get(i);
			if(result>=stepJumpDef.getStartResult() && result<=stepJumpDef.getEndResult())
			{
				return stepJumpDef;
			}
		}
		return stepMaps.get(this.Step_out_Default);
		
	}
	
	/**
	 * Constructor.
	 */
	public OrderFlowStepdef() {
	}

	/**
	 * Set the 订单类型.
	 * 
	 * @param catetory
	 *            订单类型
	 */
	public void setCatetory(String catetory) {
		this.catetory = catetory;
	}

	/**
	 * Get the 订单类型.
	 * 
	 * @return 订单类型
	 */
	public String getCatetory() {
		return this.catetory;
	}

	/**
	 * Set the 订单步骤ID.
	 * 
	 * @param stepId
	 *            订单步骤ID
	 */
	public void setStepId(String stepId) {
		this.stepId = stepId;
	}

	/**
	 * Get the 订单步骤ID.
	 * 
	 * @return 订单步骤ID
	 */
	public String getStepId() {
		return this.stepId;
	}

	/**
	 * Set the 步骤名称.
	 * 
	 * @param stepName
	 *            步骤名称
	 */
	public void setStepName(String stepName) {
		this.stepName = stepName;
	}

	/**
	 * Get the 步骤名称.
	 * 
	 * @return 步骤名称
	 */
	public String getStepName() {
		return this.stepName;
	}

	/**
	 * Set the 步骤执行任务.
	 * 
	 * @param taskIn
	 *            步骤执行任务
	 */
	public void setTaskIn(String taskIn) {
		this.taskIn = taskIn;
	}

	/**
	 * Get the 步骤执行任务.
	 * 
	 * @return 步骤执行任务
	 */
	public String getTaskIn() {
		return this.taskIn;
	}

	/**
	 * Set the 任务执行后失败的步骤定义.
	 * 
	 * @param taskOutError
	 *            任务执行后失败的步骤定义
	 */
	public void setTaskOutError(String taskOutError) {
		this.taskOutError = taskOutError;
		setStepJumpDefs(taskOutError);
	}

	/**
	 * Get the 任务执行后失败的步骤定义.
	 * 
	 * @return 任务执行后失败的步骤定义
	 */
	public String getTaskOutError() {
		return this.taskOutError;
	}

	/**
	 * Set the 任务执行成功后的步骤定义.
	 * 
	 * @param taskOutSucc
	 *            任务执行成功后的步骤定义
	 */
	public void setTaskOutSucc(String taskOutSucc) {
		this.taskOutSucc = taskOutSucc;
		setStepJumpDefs(taskOutSucc);
	}

	/**
	 * Get the 任务执行成功后的步骤定义.
	 * 
	 * @return 任务执行成功后的步骤定义
	 */
	public String getTaskOutSucc() {
		return this.taskOutSucc;
	}

	/**
	 * Set the 失败后如果没有配置错误码，调用该请求.
	 * 
	 * @param taskOutDefault
	 *            失败后如果没有配置错误码，调用该请求
	 */
	public void setTaskOutDefault(String taskOutDefault) {
		this.taskOutDefault = taskOutDefault;
		
		this.setStepJumpDefs(taskOutDefault);
		
	}

	/**
	 * Get the 失败后如果没有配置错误码，调用该请求.
	 * 
	 * @return 失败后如果没有配置错误码，调用该请求
	 */
	public String getTaskOutDefault() {
		return this.taskOutDefault;
	}

	/**
	 * Set the 任务运行类型.
	 * 
	 * @param runType
	 *            任务运行类型
	 */
	public void setRunType(String runType) {
		this.runType = runType;
	}

	/**
	 * Get the 任务运行类型.
	 * 
	 * @return 任务运行类型
	 */
	public String getRunType() {
		return this.runType;
	}

	/**
	 * Set the 任务运行参数.
	 * 
	 * @param runInfo
	 *            任务运行参数
	 */
	public void setRunInfo(String runInfo) {
		this.runInfo = runInfo;
	}

	/**
	 * Get the 任务运行参数.
	 * 
	 * @return 任务运行参数
	 */
	public String getRunInfo() {
		return this.runInfo;
	}

	/**
	 * Set the 任务重做次数.
	 * 
	 * @param retryTimes
	 *            任务重做次数
	 */
	public void setRetryTimes(String retryTimes) {
		this.retryTimes = retryTimes;
	}

	/**
	 * Get the 任务重做次数.
	 * 
	 * @return 任务重做次数
	 */
	public String getRetryTimes() {
		return this.retryTimes;
	}

	@Override
	public String toString() {
		return "OrderFlowStepdef [catetory=" + catetory + ", stepId=" + stepId + ", stepName=" + stepName + ", taskIn="
				+ taskIn + ", taskOutError=" + taskOutError + ", taskOutSucc=" + taskOutSucc + ", taskOutDefault="
				+ taskOutDefault + ", runType=" + runType + ", runInfo=" + runInfo + ", retryTimes=" + retryTimes + "]";
	}

}
